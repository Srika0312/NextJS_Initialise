import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { API_URL, user_token } from "../../Lib/Data";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";
import { useContext } from "react";
import { LoadingContext } from "../../Providers/LoadingProvider";
import { AxiosInstance } from "../../Utils/Instances";

const schema = z.object({
  name: z
    .string()
    .nonempty({ message: "Name is required" })
    .min(4, { message: "Name must contain atleast 4 characters" })
    .max(50),
  email: z.string().nonempty({ message: "Email is required" }).email(),
  // phone: z
  //   .string()
  //   .nonempty({ message: "Phone is required" })
  //   .length(10, { message: "Phone number must be exactly 10 digits" })
  //   .regex(/^\d+$/, { message: "Phone number must contain only numbers" })
  //   .transform((val) => Number(val)),
  password: z
    .string()
    .nonempty({ message: "Password is required" })
    .min(4, { message: "Password must contain at least 4 characters" })
    .refine((value) => /[a-z]/.test(value), {
      message: "Password must contain at lbeast one lowercase letter",
    })
    .refine((value) => /[A-Z]/.test(value), {
      message: "Password must contain at least one uppercase letter",
    })
    .refine((value) => /\d/.test(value), {
      message: "Password must contain at least one number",
    })
    .refine((value) => /[!@#$%^&*(),.?":{}|<>]/.test(value), {
      message: "Password must contain at least one special character",
    }),
});

type FormFields = z.infer<typeof schema>;

export default function () {
  const navigate = useNavigate();
  const { SetLoading } = useContext(LoadingContext);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormFields>({ resolver: zodResolver(schema) });

  return (
    <div className="w-full h-full flex justify-center items-center">
      <form
      className="w-full flex items-center justify-center"
        noValidate
        onSubmit={handleSubmit(async (data: any) => {
          try {
            SetLoading(true);
            const response = await AxiosInstance.post(
              `${API_URL}/user/sign-up`,
              {
                name: data.name,
                email: data.email,
                password: data.password,
                // phone: data.phone,
              }
            );
            console.log(data);

            const token = response?.data?.token;
            localStorage.setItem(user_token, token);
            navigate(`/chats`);
            toast.success(response.data.message);
          } catch (error: any) {
            toast.error(error?.response?.data?.message);
            console.log(error.message);
          } finally {
            SetLoading(false);
          }
        })}
      >
        <div className="w-full min-w-sm max-w-lg flex flex-col items-center justify-center gap-4">
        <h1 className="text-center text-4xl font-medium">Sign Up</h1>

          <input
            {...register("name")}
            type="text"
            placeholder="Enter Name"
            className="input w-full input-bordered rounded-none"
          />
          <p className="text-red-500 text-md">{errors?.name?.message}</p>

          <input
            {...register("email")}
            type="text"
            placeholder="Enter email"
            className="input w-full input-bordered rounded-none"
          />
          <p className="text-red-500 text-md">{errors.email?.message}</p>
          <input
            {...register("password")}
            type="text"
            placeholder="Enter password"
            className="input w-full input-bordered rounded-none"
          />
          <p className="text-red-500 text-md">{errors.password?.message}</p>

          {/* <input
            {...register("phone")}
            type="text"
            placeholder="Enter phone"
            className="input w-full input-bordered rounded-none"
          />
          <p className="text-red-500 text-md">{errors.phone?.message}</p> */}

          <button
            type="submit"
            className="lg:w-full w-5/6 text-lg rounded-full p-2 shadow-lg bg-black text-white "
          >
            Sign Up
          </button>
          <div className="w-full flex justify-center items-center gap-2">
            <h1>Already have Account ?</h1>
            <button className="cursor-pointer text-primary" onClick={() => navigate(`/`)}>
              Sign In
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
